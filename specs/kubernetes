#!/usr/bin/env bash
source "$(cd "$(dirname "$0")" && pwd)/../pretty-print"

title "Kubernetes"

kubectl_version="v1.11.7"
helm_version="v2.13.1"
kops_version="1.11.1"
argo_version="v2.3.0"

if ! [ -x "$(command -v brew)" ]; then
  print_error "Docker is required, it should be included in the 'specs'"
  return 1
fi

mkdir -p "$HOME/.bin"
if [[ ! ":$PATH:" == *":$HOME/.bin:"* ]]; then
  print_error "\$PATH entry missing"
  print_error "Add to your shell's rc file: PATH=\"\$HOME/.bin:\$PATH\""
fi

### kubectl
if [ "$FORCE" = true ] || [ ! -f "$HOME/.bin/kubectl" ] || [ "$(kubectl version --client --output=json | jq -r .clientVersion.gitVersion)" != $kubectl_version ]; then
  echo_install "Installing kubectl"
  curl --fail -L -s https://storage.googleapis.com/kubernetes-release/release/$kubectl_version/bin/darwin/amd64/kubectl >"$HOME/.bin/kubectl" && chmod +x "$HOME/.bin/kubectl"
  print_in_green "${bold}✓ installed!${normal}\n"
else
  print_success_muted "kubectl"
fi

### helm
if [ "$FORCE" = true ] || [ ! -f "$HOME/.bin/helm" ] || ! helm version --client --short | grep -q "$helm_version+"; then
  echo_install "Installing helm"
  curl --fail -L -s https://kubernetes-helm.storage.googleapis.com/helm-$helm_version-darwin-amd64.tar.gz | tar xf - --strip=1 -C "$HOME/.bin" darwin-amd64/helm
  print_in_green "${bold}✓ installed!${normal}\n"
else
  print_success_muted "helm"
fi
helm init -c >/dev/null

### kops
if [ "$FORCE" = true ] || [ ! -f "$HOME/.bin/kops" ] || ! kops version | grep -q " $kops_version "; then
  echo_install "Installing kops"
  curl --fail -L -s https://github.com/kubernetes/kops/releases/download/${kops_version}/kops-darwin-amd64 -o "$HOME/.bin/kops" && chmod +x "$HOME/.bin/kops"
  print_in_green "${bold}✓ installed!${normal}\n"
else
  print_success_muted "kops"
fi

### argo
if [ "$FORCE" = true ] || [ ! -f "$HOME/.bin/argo" ] || ! argo version | grep -q "$argo_version"; then
  echo_install "Installing argo"
  curl --fail -L -s https://github.com/argoproj/argo/releases/download/${argo_version}/argo-darwin-amd64 -o "$HOME/.bin/argo" && chmod +x "$HOME/.bin/argo"
  print_in_green "${bold}✓ installed!${normal}\n"
else
  print_success_muted "argo"
fi

if [ "$FORCE" = true ] || [ ! -f "$HOME/.bin/jb" ]; then
  echo_install "Installing jsonnet-bundler"
  docker run --rm -e GOOS=darwin -e GOARCH=amd64 -v "$HOME/.bin":/data golang /bin/bash -c \
    "go get github.com/jsonnet-bundler/jsonnet-bundler/cmd/jb && cp /go/bin/darwin_amd64/jb /data"
  print_in_green "${bold}✓ installed!${normal}\n"
else
  print_success_muted "jsonnet-bundler"
fi

if [ "$FORCE" = true ] || [ ! -f "$HOME/.bin/gojsontoyaml" ]; then
  echo_install "Installing gojsontoyaml"
  docker run --rm -e GOOS=darwin -e GOARCH=amd64 -v "$HOME/.bin":/data golang /bin/bash -c \
    "go get github.com/brancz/gojsontoyaml && cp /go/bin/darwin_amd64/gojsontoyaml /data"
  print_in_green "${bold}✓ installed!${normal}\n"
else
  print_success_muted "gojsontoyaml"
fi

if [ "$FORCE" = true ] || [ ! -f "$HOME/.bin/render" ]; then
  echo_install "Installing render"
  docker run --rm -e GOOS=darwin -e GOARCH=amd64 -v "$HOME/.bin":/data golang /bin/bash -c \
    "go get github.com/VirtusLab/render && cp /go/bin/darwin_amd64/render /data"
  print_in_green "${bold}✓ installed!${normal}\n"
else
  print_success_muted "render"
fi
